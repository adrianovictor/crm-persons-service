name: Code Review by Gemini AI

on:
  pull_request:
    branches:
      - develop

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Get PR diff
        id: get_diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git diff origin/${{ github.event.pull_request.base.ref }} origin/${{ github.event.pull_request.head.ref }} > diff.txt
          echo "pull_request_diff<<EOF" >> $GITHUB_OUTPUT
          cat diff.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Code Review by Gemini AI
        uses: rubensflinco/gemini-code-review-action@1.0.5
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repository: ${{ github.repository }}
          github_pull_request_number: ${{ github.event.pull_request.number }}
          git_commit_hash: ${{ github.event.pull_request.head.sha }}
          model: "gemini-2.0-flash"
          pull_request_diff: ${{ steps.get_diff.outputs.pull_request_diff }}
          pull_request_chunk_size: "3500"
          extra_prompt: |
            **Instru√ß√µes Detalhadas para o Revisor de C√≥digo AI (Branch Develop):**
            1. **Idioma e Tom:** Responda sempre em **Portugu√™s Brasileiro**. Seja **direto, objetivo e profissional**, como um Engenheiro de Software S√™nior.
            2. **Contexto Arquitetural Rigoroso:** O c√≥digo √© para APIs em .NET Core. A avalia√ß√£o DEVE ser extremamente rigorosa quanto √† ades√£o a:
                - **Clean Architecture / Arquitetura em Camadas**
                - **CQRS com MediatR** (separa√ß√£o clara de Commands e Queries)
                - **Princ√≠pios SOLID e DDD (Domain-Driven Design)**
                - Uso correto de **Entity Framework e/ou Dapper** (efici√™ncia e performance)
                - Estrutura de **Docker/Docker-Compose** e scripts de **Liquibase (SQL Server, Postgres, MySQL)**.
                - **Nota sobre Valida√ß√£o:** O uso de m√©todos de extens√£o que lan√ßam 'ArgumentException' (Guard Clauses) √© permitido e incentivado, desde que ocorra APENAS dentro de Aggregate Roots ou Value Objects no Dom√≠nio. Este uso **N√ÉO** √© uma viola√ß√£o da Clean Architecture.
                - **Nota sobre Value Objects (VOs):** Ao sugerir a cria√ß√£o de um Value Object, **SEMPRE forne√ßa um exemplo m√≠nimo de c√≥digo** para a classe VO, demonstrando a implementa√ß√£o correta de construtor, propriedades imut√°veis, e a sobrecarga de **`Equals`** e **`GetHashCode`**.

            3. **Foco de An√°lise Obrigat√≥ria:**
                a. **L√≥gica e *Typos*:** Identificar **falhas de l√≥gica** (*bugs* funcionais, *edge cases* n√£o tratados) e erros de digita√ß√£o (*typos*) que afetem o funcionamento ou legibilidade.
                b. **Arquitetura/Padr√£o:** Verificar viola√ß√µes de fronteiras arquiteturais (ex: acesso direto ao EF na camada de Application), viola√ß√µes de SOLID (ex: classes com m√∫ltiplas responsabilidades) e desvios do padr√£o DDD.
                c. **Performance (C#):** Avaliar gargalos, uso ineficiente de LINQ, concorr√™ncia (ex: uso indevido de *locks* ou cole√ß√µes n√£o thread-safe).
                d. **Async/Sync:** Garantir o uso correto de `async/await` (evitar `Task.Wait()`, *fire-and-forget* em APIs), garantindo a cadeia ass√≠ncrona.
                e. **SQL/Sintaxe:** Analisar a performance das consultas SQL (via c√≥digo ou Liquibase), checar sintaxe C# e ader√™ncia √†s conven√ß√µes de nomenclatura.

            4. **Formato de Coment√°rio (Por Ponto):**
                - **CONFORMIDADE DE IDIOMA:** Confirme que todos os t√≠tulos, par√°grafos e coment√°rios (Severidade, Sugest√£o) est√£o em Portugu√™s Brasileiro.
                - Para cada problema ou sugest√£o, inclua o **arquivo** e a **linha aproximada**, e siga o padr√£o, utilizando Markdown:
                - Somente fa√ßa sugest√µes se estas representarem uma melhoria clara ou um ganho de performance significativo para a aplica√ß√£o ou para a implementa√ß√£o/classe/m√©todo em quest√£o.
                - **Severidade:** [Alta, M√©dia, Baixa]
                - **Sugest√£o:** [como melhorar]

            5. **Regra de Bloqueio (Problemas Cr√≠ticos):**
                - Se o revisor encontrar um problema **grave** (ex: falha de seguran√ßa, *deadlock* certo, quebra de Clean Architecture ou inconsist√™ncia de dados), voc√™ **DEVE** iniciar o coment√°rio com a *string* exata: `üö® PROBLEMA CR√çTICO:`
                - **EXEMPLO DE BLOQUEIO:** `üö® PROBLEMA CR√çTICO: Viola√ß√£o do princ√≠pio CQS. Este m√©todo de Command est√° retornando dados de dom√≠nio, o que quebra a separa√ß√£o de responsabilidades.`

            6. **Estrutura da Resposta:** Separe a revis√£o em se√ß√µes claras: **Problemas Cr√≠ticos (Bloqueio)**, **Recomenda√ß√µes de Arquitetura e Padr√µes (ALTA/M√âDIA)** e **Melhorias de Legibilidade e Sintaxe (BAIXA)**.
                - **CONFORMIDADE DE IDIOMA:** Confirme que todos os t√≠tulos, par√°grafos e coment√°rios (Severidade, Sugest√£o) est√£o em Portugu√™s Brasileiro.
                - **Priorize a estrutura:** **Problemas Cr√≠ticos (Bloqueio)**, **Recomenda√ß√µes de Arquitetura/Padr√£o (ALTA/M√âDIA)** e **Melhorias de Legibilidade/Sintaxe (BAIXA)**.
                - **Consolide Sugest√µes:** **Evite repetir a mesma sugest√£o** (ex: "Usar .resx para strings") em v√°rios pontos. Liste sugest√µes comuns no final da se√ß√£o de *Melhorias Gerais*.
                - **Seja Expl√≠cito:** Se uma sugest√£o for de um padr√£o (como Value Object), forne√ßa um **exemplo pr√°tico de implementa√ß√£o** no corpo do coment√°rio.
                - **Se n√£o houver problemas graves, finalize com:** `[REVIEW_OK]`
                - **Execute a revis√£o no diff fornecido abaixo.**
          log_level: "DEBUG"

      - name: Salvar resposta da Gemini
        run: |
          echo "${{ steps.gemini_review.outputs.gemini_log }}" > gemini_log.txt

      - name: Simular estrutura JSON b√°sica de erro (tempor√°rio at√© a action suportar JSON real)
        run: |
          if grep -q "üö® PROBLEMA CR√çTICO" gemini_log.txt; then
            echo '{ "status": "error", "severity": "critical", "message": "Problema cr√≠tico detectado pelo Gemini." }' > gemini-result.json
          else
            echo '{ "status": "ok" }' > gemini-result.json
          fi

      - name: Verificar problemas cr√≠ticos
        run: |
          STATUS=$(jq -r '.status' gemini-result.json)
          MSG=$(jq -r '.message' gemini-result.json)

          if [ "$STATUS" == "error" ]; then
            echo "::error title=Erro do Gemini::$MSG"
            exit 1
          else
            echo "‚úÖ Nenhum problema cr√≠tico detectado pelo Gemini."
          fi
       